{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projectopia documentation","text":"<p>Powered by GitHub</p> <p>Empower Your Projects with Effortless Beginnings. Projectopia ignites your projects with a seamless start, removing barriers so you can dive into creativity effortlessly.</p>"},{"location":"#welcome-to-projectopia-technical-documentation","title":"Welcome to Projectopia Technical Documentation","text":"<p>Projectopia streamlines your project initiation, equipping you with:</p> <ul> <li>Template Application: Swiftly apply pre-defined project structures and configurations.</li> <li>Automated GitHub Repository Creation: Eliminate manual setup with instant GitHub repository generation.</li> <li>Pre-configured GitHub Actions Workflow: Streamline development processes with pre-defined automation workflows.</li> </ul> <p></p>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Go to Technical Explaination to learn deep-dive on tech stack that we use</li> <li>Go to Workflow Explaination for an overview of how we doing this project</li> <li>Go to Scaffold - Soul of Projectopia for an overview of the heart of Projectopia</li> </ul>"},{"location":"scaffold/","title":"Scaffold - soul of Projectopia","text":"<p>Example of scaffold in real life</p> <p>Imagine building a LEGO house! Scaffolding in design is like having a basic LEGO frame ready. You can choose the frame and then add your own colors, rooms, and decorations to make it your own special dream house! So the ability of customizations are the power of scaffolds.</p>"},{"location":"scaffold/#what-is-software-scaffold","title":"What is Software Scaffold","text":"<p>Ever heard of traditional software templates? They're like pre-made blueprints for websites, APIs, or even Docker containers. But let's be honest, traditional templates often leave you feeling lost:</p> <ul> <li>Lack of resources, customizations</li> <li>Not clear about the tech they use in that template, making modifications a challenge.</li> <li>Not have clear documentations on how to adapt and how to work with that template</li> <li>No clue how to launch/deploy your creation and make it accessible to the world.</li> </ul> <p>DevOps is rock \ud83d\ude2e\u200d\ud83d\udca8</p> <p></p> <p>So that why...</p>"},{"location":"scaffold/#why-choose-scaffold-but-not-traditional-template","title":"Why Choose Scaffold but not traditional Template","text":"Feature Scaffold Traditional Template Customization \u2705 Adjust parameters during application \u274c Fixed structure,    configuration Community-Driven Contribute and benefit from shared Scaffolds Limited to pre-defined options Flexibility Tailor to specific project requirements One-size-fits-all approach Contribution Open to community contributions Closed approach"},{"location":"scaffold/#how-we-making-software-scaffolds","title":"How we making Software Scaffolds","text":"<p>Projectopia ignites your projects with effortless beginnings, and at the heart of this lies Software Scaffold, a powerful tool that goes beyond traditional templates. Scaffold empowers you with:</p> <ul> <li>Customization: Unlike rigid templates, Scaffolds allow you to fine-tune parameters and choose specific configurations during application, ensuring a perfect fit for your project's unique needs.</li> <li>Community-Driven: Projectopia fosters a vibrant Scaffold Community where developers can contribute verified, high-quality Scaffolds. This ever-growing library provides a wealth of options for diverse project types and preferences.</li> <li>Powered by Cookiecutter: Projectopia leverages the robust Cookiecutter engine, ensuring a reliable and efficient experience while generating your project structure. </li> </ul>"},{"location":"workflow/","title":"Workflow explaination","text":""},{"location":"workflow/#tldr-projectopia-workflow","title":"tl;dr: Projectopia Workflow","text":"<ol> <li>Create Project: Fill out a form on our NextJS frontend to create a GitHub project with your desired setup.</li> <li>Automated Setup: Our server clones your repo, applies your chosen scaffold with CI/CD, and pushes it to GitHub.</li> <li>Deployment (Optional): Choose to deploy your app to Vercel (backend) or GitHub Pages (static) for free, or pay for premium infrastructure (AWS, GCP, Azure).</li> </ol> <p>Important Note</p> <p>Your inputs are stored securely for future support and infrastructure deletion.</p>"},{"location":"workflow/#detailed-workflow","title":"Detailed Workflow","text":"<ul> <li>User will create project on our frontend form (written in NextJS), and it will make a request to our Flask API to create a GitHub Project based on user's inputs.</li> <li>Then our server will clone your generated Repo on Github using Projectopia Bot Account and apply scaffold, then push to it.</li> </ul> <p>Information</p> <p>Our MongoDB Database will store your inputs as hashed key and use them for supporting and deleting infrastructure purpose if you want in the future.</p> <ul> <li>After that, Projectopia Bot will apply CI/CD workflows on your generated repo and trigger deploy your application on your/our infrastructure (default will be Vercel for backend app and Github Pages for static app).</li> </ul> <p>Deployment Cost</p> <p>Deployment is optional. But if you choose to deploy on our premium infrastructure (AWS, GCP, Azure,...), we will charge you with a customized pricing.</p>"},{"location":"technical-explaination/1-cookiecutter/","title":"Scaffold with cookiecutter","text":""},{"location":"technical-explaination/1-cookiecutter/#introduction","title":"Introduction","text":"<p>Cookiecutter is a command-line utility that generates projects from project templates. These templates are directories containing files and folders, along with a cookiecutter.json file that defines variables and default values used during project generation. This deep dive will cover how to create a scaffold and apply a scaffold template using Cookiecutter.</p>"},{"location":"technical-explaination/1-cookiecutter/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"technical-explaination/1-cookiecutter/#installing-cookiecutter","title":"Installing Cookiecutter","text":"<p>Before we begin, make sure you have Cookiecutter installed. You can install it using pip:</p> <pre><code>pip install cookiecutter\n</code></pre> <p>Pip Installation Note</p> <p>Note that you should install pip directly from your global python environment. You should not use a virtual environment to install cookiecutter.</p>"},{"location":"technical-explaination/1-cookiecutter/#creating-a-scaffold","title":"Creating a Scaffold","text":"<p>o create a new Cookiecutter template, you need to create a directory with the structure you want for your project, along with a cookiecutter.json file. Let's create a simple template for a Python project:</p> <p>Create a new directory for your template:</p> <pre><code>mkdir cookiecutter-template\n</code></pre> <p>Inside the cookiecutter-template directory, create the following files and folders:</p> <pre><code>cookiecutter-template\n\u251c\u2500\u2500 {{cookiecutter.project_slug}}\n\u2502   \u2514\u2500\u2500README.md\n\u2514\u2500\u2500 cookiecutter.json\n</code></pre> <p>Add content to the files: README.md:</p> <pre><code># {{cookiecutter.project_name}}\n</code></pre> <p>Add content to the files: cookiecutter.json:</p> <pre><code>{\n  \"project_name\": \"Your project name\",\n  \"project_slug\": \"{{ cookiecutter.project_name.replace(' ', '_').lower() }}\"\n}\n</code></pre> <p>Note</p> <p>The project_slug variable is used to create a normalized name from the project_name variable.</p>"},{"location":"technical-explaination/1-cookiecutter/#generating-a-project-from-the-scaffold","title":"Generating a Project from the Scaffold","text":"<p>Now that you've created your template, you can use it to generate a new project:</p> <p>Run Cookiecutter and provide the path to your template directory:</p> <pre><code>cookiecutter &lt;cookiecutter-template-url&gt;\n</code></pre> <p>Cookiecutter will prompt you to provide values for the variables defined in cookiecutter.json:</p> <pre><code>project_name [Your project name]: My Python Project\nproject_slug [my_python_project]:\n</code></pre> <p>Cookiecutter Prompt</p> <p>For <code>project_slug</code>, please Enter to accept the default value (normalized project name)</p> <p>Press Enter to accept the default value or provide a new value and press Enter.</p> <p>After providing all the values, Cookiecutter will generate your project in a new directory with the name you specified. You can now navigate to this directory and start working on your project:</p> <pre><code>cd my-python-project\n</code></pre>"},{"location":"technical-explaination/1-cookiecutter/#cruft","title":"Cruft","text":"<p>Cruft is like Cookiecutter orchestration. It allows you to manage multiple Cookiecutter templates in a single repository, and it can be used to update your project to the latest version of the template, or change the input values after the project has been generated.</p> <p>Cruft is an optional tool that can be used to manage the lifecycle of your project. It can be used to update your project to the latest version of the template, or to remove files that are no longer needed.</p>"},{"location":"technical-explaination/1-cookiecutter/#installing-cruft","title":"Installing Cruft","text":"<p>Before we begin, make sure you have Cruft installed. You can install it using pip:</p> <pre><code>pip install cruft\n</code></pre>"},{"location":"technical-explaination/1-cookiecutter/#creating-a-scaffold-with-cruft","title":"Creating a Scaffold with Cruft","text":"<p>The structure of the scaffold is the same as the previous example. The only difference is that you need to add a .cruft.json file to the template directory. This file is used to define the configuration for Cruft.</p> <p>Note</p> <p>But cruft can ultilize multiple templates inside a single repository (with different branch or on the same branch). For more information, please refer to the Cruft Documentation</p>"},{"location":"technical-explaination/1-cookiecutter/#applying-a-scaffold-template-with-cruft","title":"Applying a Scaffold Template with Cruft","text":"<p>To apply a scaffold template with Cruft, you can use the following command:</p> <pre><code>cruft create &lt;cookiecutter-template-url&gt; --checkout &lt;branch&gt; --directory &lt;template-directory&gt;\n</code></pre> <p>Cruft Command</p> <ul> <li><code>--checkout</code> is used to specify the branch of the template. Default is your <code>master/main</code>. branch</li> <li><code>--directory</code> is used to specify the directory of the template. Default is the root directory of the repository.</li> </ul> <p>Directory Note</p> <p>Just use the <code>--directory</code> option if your template is in a subdirectory of the repository, or you have multiple templates in the same repository.</p> <p>After you enter the command, Cruft will prompt you to provide values for the variables defined in <code>cookiecutter.json</code>, and it will be the same as the previous example.</p>"},{"location":"technical-explaination/1-cookiecutter/#updating-a-project-with-cruft","title":"Updating a Project with Cruft","text":"<p>The special of Cruft is that it can genarate a special file called <code>.cruft.json</code> in the root of the generated project. This file is used to define the configuration for Cruft. You can use this file to update your project to the latest version of the template.</p> <p>The file will look like this:</p> <pre><code>{\n  \"template\": {\n    \"url\": \"&lt;cookiecutter-template-url&gt;\",\n    \"checkout\": \"&lt;branch&gt;\",\n    \"directory\": \"&lt;template-directory&gt;\",\n    \"context\": {\n      \"project_name\": \"My Python Project\",\n      \"project_slug\": \"my_python_project\"\n    }\n  }\n}\n</code></pre> <p>This file is used to define the configuration for Cruft. You can use this file to update your project to the latest version of the template, or when you want to change the input values for the template.</p> <pre><code>cruft update\n</code></pre>"},{"location":"technical-explaination/1-cookiecutter/#conclusion","title":"Conclusion","text":"<p>Cookiecutter is a powerful tool for generating project scaffolds from templates. By creating your own templates, you can quickly set up new projects with predefined structures and files, saving you time and ensuring consistency across your projects.</p>"},{"location":"technical-explaination/2-flask-api/","title":"Flask with GitHub API","text":"<p>will implement later</p>"},{"location":"technical-explaination/3-github-actions/","title":"CI/CD with GitHub Actions","text":"<p>will implement later</p>"},{"location":"technical-explaination/4-pulumi/","title":"Pulumi Infrastructure as Code","text":"<p>will implement later</p>"}]}